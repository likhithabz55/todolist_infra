name: Nightly Build

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Infrastructure Repository
        uses: actions/checkout@v4

      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          repository: "likhithabz55/todolist-app"
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set date range
        run: |
            YESTERDAY=$(date -u -d "24 hours ago" +%Y-%m-%dT%H:%M:%S)
            echo "since_time=$YESTERDAY" >> $GITHUB_ENV

      - name: Get commit messages from last 24h
        id: commits
        run: |
            COMMITS=$(git log --since="${{ env.since_time }}" --pretty=format:"%s")
            ESCAPED_COMMITS=$(echo "$COMMITS" | jq -sRr @uri)
            echo "commit_messages=$ESCAPED_COMMITS" >> $GITHUB_OUTPUT
          

      - name: Debug commit messages
        id: debug
        run: |
            ENCODED="${{ steps.commits.outputs.commit_messages }}"
        
            # Decode using printf and sed
            DECODED=$(printf '%b' "${ENCODED//%/\\x}")
            echo "Decoded commit messages:"
            echo "$DECODED"
        
            echo "decoded_commit_messages<<EOF" >> "$GITHUB_OUTPUT"
            echo "$DECODED" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Get changed files in last 24h
        id: changed
        run: |
            FILES=$(git log --since="${{ env.since_time }}" --name-only --pretty=format: | sort -u)
            echo "Changed files:"
            echo "$FILES"

            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            echo "$FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT   

      - name: Detect services to version bump
        id: detect_services
        run: |
            FILES="${{ steps.changed.outputs.changed_files }}"
            echo "Changed files:"
            echo "$FILES"

            SERVICES=()

            if echo "$FILES" | grep -q "^frontend/"; then
              SERVICES+=("frontend")
            fi

            if echo "$FILES" | grep -q "^user-service/"; then
              SERVICES+=("user-service")
            fi

            if echo "$FILES" | grep -q "^taskview-service/"; then
              SERVICES+=("taskview-service")
            fi

            echo "Changed services: ${SERVICES[@]}"
            echo "services_to_bump=${SERVICES[*]}" >> $GITHUB_OUTPUT

      - name: Determine highest level change
        id: level
        run: |
          LEVEL="patch"
          echo "Commit messages from last 24 hours:"
          echo "${{ steps.debug.outputs.decoded_commit_messages }}"
          
          # Check for BREAKING CHANGE (major bump)
          if echo "${{ steps.debug.outputs.decoded_commit_messages }}" | grep -qi "BREAKING CHANGE"; then
            LEVEL="major"
          
          elif echo "${{ steps.debug.outputs.decoded_commit_messages }}" | grep -qiE "^feat"; then
            LEVEL="minor"
          fi
          
          echo "Version bump level should be: $LEVEL"
          echo "level=$LEVEL" >> $GITHUB_ENV  # Store version bump level in environment variable   

      - name: Output bump level
        run: |
            echo "Version bump level: ${{ env.level }}"

      - name: Compute bumped versions per service
        id: bump_versions
        run: |
          SERVICES="${{steps.detect_services.outputs.services_to_bump}}"
          LEVEL="${{ env.level }}"

          echo "Computing bumped versions for: $SERVICES"
          echo "Level: $LEVEL"

          NEW_VERSIONS_JSON="{"
          FIRST=true

          for SERVICE in $SERVICES; do
            VERSION=$(jq -r --arg svc "$SERVICE" '.[$svc]' versions.json)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

            case "$LEVEL" in
              major)
                MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
              minor)
                MINOR=$((MINOR + 1)); PATCH=0 ;;
              patch)
                PATCH=$((PATCH + 1)) ;;
            esac

            NEW_VERSION="$MAJOR.$MINOR.$PATCH"

            if [ "$FIRST" = true ]; then
              NEW_VERSIONS_JSON+="\"$SERVICE\":\"$NEW_VERSION\""
              FIRST=false
            else
              NEW_VERSIONS_JSON+=",\"$SERVICE\":\"$NEW_VERSION\""
            fi
          done

          NEW_VERSIONS_JSON+="}"

          echo "NEW_VERSIONS_JSON=$NEW_VERSIONS_JSON" >> $GITHUB_ENV
          echo "NEW_VERSIONS_JSON: $NEW_VERSIONS_JSON"
          echo "$NEW_VERSIONS_JSON" > new_versions.json

      - name: Check for version changes
        id: check_version_changes
        run: |
          NEW_VERSIONS_JSON="${{ env.NEW_VERSIONS_JSON }}"
          echo "NEW_VERSIONS_JSON: $NEW_VERSIONS_JSON"  # Debugging the output
          
          echo "changes_services:"
          echo "$NEW_VERSIONS_JSON"
          echo "without quotes"
          echo $NEW_VERSIONS_JSON
          
          echo "Contents of new_versions.json:"
          cat new_versions.json

          # Check if any service has a new version
          CHANGED_SERVICES=$(jq -r 'keys[]' new_versions.json)
          
          

          if [ -z "$CHANGED_SERVICES" ]; then
            echo "No version changes detected. Skipping Docker build and push."
            echo "skip_build=true" >> $GITHUB_ENV
          else
            echo "Version changes detected: $CHANGED_SERVICES"
            echo "skip_build=false" >> $GITHUB_ENV
          fi
    

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build and Tag docker images
        if: env.skip_build == 'false'
        run: |
          SERVICES="${{steps.detect_services.outputs.services_to_bump}}"
          for SERVICE in $SERVICES; do
            NEW_VERSION=$(jq -r --arg svc "$SERVICE" '.[$svc]' new_versions.json)
            
            echo "Building Docker image for $SERVICE"
            cd $SERVICE
            docker buildx build --platform linux/arm64 -t todolist-app/$SERVICE . --load
            docker tag todolist-app/$SERVICE:latest 822298509516.dkr.ecr.us-east-1.amazonaws.com/blue_green_ecr/$SERVICE:$NEW_VERSION
            
            echo "Pushing $SERVICE:$NEW_VERSION to Docker registry"
            docker push "822298509516.dkr.ecr.us-east-1.amazonaws.com/blue_green_ecr/$SERVICE:$NEW_VERSION"
          done
            
            
            
