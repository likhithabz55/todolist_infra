apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deployment
  labels:
    app: postgres            #pods will be named app: user-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:                     #specifies the container image the pods will run
        - name: postgres
          image: postgres:16
          imagePullPolicy: Always
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_DB
              value: todo
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-data
#          persistentVolumeClaim:
#            claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  labels:
    app: postgres
spec:
  type: ClusterIP
  selector:
    app: postgres # Select pods with label app=mongodb
  ports:
    - protocol: TCP
      port: 5432 # Service Port
      targetPort: 5432 # Pods Port

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  labels:
    app: frontend            #pods will be named app: user-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        version: "${FRONTEND_VERSION}"
    spec:
      nodeSelector:
        arch: arm64
    spec:
      containers:                     #specifies the container image the pods will run
        - name: frontend
          image: 822298509516.dkr.ecr.us-east-1.amazonaws.com/blue_green_ecr/frontend:${FRONTEND_VERSION}
          imagePullPolicy: Always
          ports:
            - containerPort: 3000


---

apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  labels:
    app: frontend
spec:
  type: ClusterIP
  selector:
    app: frontend
    version: "${FRONTEND_VERSION}"
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: taskview-service-deployment
  labels:
    app: taskview-service            #pods will be named app: user-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: taskview-service
  template:
    metadata:
      labels:
        app: taskview-service
    spec:
      nodeSelector:
        arch: arm64
    spec:
      containers:                     #specifies the container image the pods will run
        - name: taskview-service
          image: 822298509516.dkr.ecr.us-east-1.amazonaws.com/blue_green_ecr/taskview_service:${TASK_VERSION}
          imagePullPolicy: Always
          ports:
            - containerPort: 8082
          env:
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://postgres-service:5432/todo
            - name: SPRING_DATASOURCE_USERNAME
              value: postgres
            - name: SPRING_DATASOURCE_PASSWORD
              value: postgres


---

apiVersion: v1
kind: Service
metadata:
  name: taskview-service
  labels:
    app: taskview-service
spec:
  type: ClusterIP
  selector:
    app: taskview-service
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8082

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service-deployment
  labels:
    app: user-service            #pods will be named app: user-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      nodeSelector:
        arch: arm64
    spec:
      containers:                     #specifies the container image the pods will run
        - name: user-service
          image: 822298509516.dkr.ecr.us-east-1.amazonaws.com/blue_green_ecr/user_service:${USER_VERSION} #pulls image from repo
          imagePullPolicy: Always
          ports:
            - containerPort: 8081
          env:
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://postgres-service:5432/todo
            - name: SPRING_DATASOURCE_USERNAME
              value: postgres
            - name: SPRING_DATASOURCE_PASSWORD
              value: postgres



---

apiVersion: v1
kind: Service
metadata:
  name: user-service
  labels:
    app: user-service
spec:
  type: ClusterIP
  selector:
    app: user-service
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8081



